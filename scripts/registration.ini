# Initialization file for `run_registration.py`. Unset parameters will be evaluated as 'None'.
# Parameters follow naming scheme and purpose from source code.
# Further documentation can be found in respective function docstrings.

# Source (s) and target (t) data must be provided either as a list of file paths or as a glob pattern.
# Source and target must follow the same naming scheme for globbing due to sorting.
# Files are processed in s0 <-> t0, s1 <-> t0, sN <-> t0, ..., sN <-> t_N order.
# If 'one_vs_one' is set to 'True', the order is s0 <-> t_0, s1 <-> t1, ..., sN <-> tN.
# 'source_files' are transformed to their 'poses' if provided. Must correspond to source/target file processing order.
# If ground truth is provided, it must correspond to source/target file processing order.
# 'init_poses'/'ground_truth' options:
# 1. 'none' (or 'center' for 'init_poses')
# 2. "path/to/pose.json" or ["path/to/pose1.json", "path/to/pose2.json", ..., "path/to/poseN.json"]
# 3. [euler_x, euler_y, euler_z, trans_x, trans_y, trans_z] or
# [[euler_x, euler_y, euler_z], [trans_x, trans_y, trans_z]]
# 4. [quaternion_x, quaternion_y, quaternion_z, quaternion_w, trans_x, trans_y, trans_z] or
# [[quaternion_x, quaternion_y, quaternion_z, quaternion_w], [trans_x, trans_y, trans_z]]
# 5. Option 3/4 for multiple poses: [[pose1], [pose2], ..., [poseN]]
# 6. Glob pattern with path to pose JSON files: "/path/to/*.json" (Should only be used if 'source_files' and
#    'target_files' are glob patterns as well and follow the same naming scheme due to sorting)
[data]
source_files = ["../tests/test_data/suzanne.ply"]  # Options: Single path, list of paths, glob pattern
target_files = ["../tests/test_data/suzanne_on_chair.ply"]
init_poses = none
ground_truth = ["../tests/test_data/ground_truth_pose.json"]
one_vs_one = False

# 'number_of_points' to sample from mesh with `sample_type`.
# 'camera_intrinsic' to convert depth or RGB-D image to point cloud.
# Elements in 'number_of_points' parameter must correspond to source/target file processing order.
# The same `camera_intrinsic` is used for all source and target files.
# Further documentation in 'utils.eval_data'.
[source_params]
sample_type = uniformly  # Options: 'uniformly', 'poisson_disk'
number_of_points = [10000]  # Options: List or single integer
camera_intrinsic = none  # Options: 'none' or [fx, s, cx, 0, fy, cy, 0, 0, 1]

[target_params]
sample_type = uniformly
number_of_points = [100000]
camera_intrinsic = none

# Parameters related to data processing after loading. Needed for 'ransac' and 'fgr' initializer.
# Further documentation in 'utils.process_point_cloud'.
[feature_processing]
compute_feature = True
search_param = hybrid  # Options: 'hybrid', 'radius', 'knn'
search_param_knn = 100
search_param_radius = 0.05

[source_processing]
downsample = voxel  # Options: 'none', 'voxel', 'uniform'
downsample_factor = 0.001
remove_outlier = none  # Options: 'none', 'statistical', 'radius'
outlier_std_ratio = 1.0
scale = 1.0
estimate_normals = False
recalculate_normals = False
normalize_normals = False
orient_normals = none  # Options: 'none', 'tangent', 'camera', 'direction'
search_param = hybrid
search_param_knn = 30
search_param_radius = 0.02
draw = False

[target_processing]
downsample = voxel
downsample_factor = 0.001
remove_outlier = none
outlier_std_ratio = 1.0
scale = 1.0
estimate_normals = False
recalculate_normals = False
normalize_normals = False
orient_normals = none
search_param = hybrid
search_param_knn = 30
search_param_radius = 0.02
draw = False

# If provided, the 'initializer' registration algorithm is run prior to 'refiner'.
# Its result is used as initialization for 'refiner'.
[algorithms]
initializer = ransac  # Options: 'none', 'ransac', 'fgr'
refiner = icp  # Options: 'none', 'icp'

# Parameters configuring the initializer.
# Not all parameters are used by all initializers.
# Further documentation in 'registration.FastGlobalRegistration' and 'registration.RANSAC'.
[initializer_params]
max_iteration = 100000  # Default: 100000 (ransac), 64 (fgr)
confidence = 0.999
max_correspondence_distance = 0.015  # Defaults: 0.015 (ransac), 0.005 (fgr)
with_scaling = False
ransac_n = 3
checkers = ["distance", "edge"]  # Options: 'distance', 'edge', 'normal'
similarity_threshold = 0.9
normal_angle_threshold = 30  # In degrees. Use radians if 'options -> use_degree' is set to False.
n_times = 1
draw = False
overwrite_colors = False

# Parameters configuring the refiner.
# Further documentation in 'registration.IterativeClosestPoint'.
[refiner_params]
relative_fitness = 1e-6
relative_rmse = 1e-6
max_iteration = 30
max_correspondence_distance = 0.004
estimation_method = point_to_point  # Options: 'point_to_point', 'point_to_plane', 'color'
with_scaling = False
kernel = none  # Options: 'none', 'tukey', 'cauchy', 'l1', 'l2', 'gm'
kernel_noise_std = 0.1
crop_target_around_source = False
crop_scale = 1.0
n_times = 1
multi_scale = False
scales = [0.02, 0.01, 0.005]
iterations = [50, 20, 10]
radius_multiplier = [2, 5]
draw = False
overwrite_colors = False

# Miscellaneous general parameters
[options]
verbose = False
print_results = True
return = 'all'  # Options: 'all', 'none', 'results', 'transforms', 'errors' (sum, e.g. 'results+errors' possible)
use_degrees = True  # Use degrees for inputs and outputs instead of radians
