# Initialization file for `hyperopt.py`.
# Documentation of possible parameter values and their meaning can be found in 'registration.ini' and code docstrings.

# During optimization, values in lists are treated as discrete choices while values in tuples (parentheses) are treated
# as intervals. Single values are fixed. Values that are already lists, e.g. 'checkers', need to be wrapped in
# an additional list (no interval possible in this case). See examples below.

# Examples:
# 1. Optimize 'sample_type' (choice): sample_type = ["uniformly", "poisson_disk"]
# 2. Optimize 'number_of_points' (choice): number_of_points = [1000, 2000]
# 3. Optimize 'number_of_points' (interval): number_of_points = (1000, 2000)
# 4. Don't optimize for 'number_of_points': number_of_points = 1000
# 5. Optimize 'inlier_rmse' in log-space (use interval with 'e' notation): inlier_rmse = (1e-10, 1e-3)
# List categories can only be used with random optimizer:
# 6. Optimize 'checkers': checkers = [["edge"], ["distance", "edge"], ["distance", "normal"]]

########################################################################################################################
################################# PARAMETERS BELOW THIS LINE MUST BE SPECIFIED #########################################
########################################################################################################################

# Option documentation can be found on the Scikit Optimize project site.
[optimization]
# Standard options (change to your liking). 'minimize' is the objective to minimize.
# minimize = errors (i.e. errors_rot+errors_trans) can only be used if 'ground_truth' is provided
minimize = errors  # Options: errors, errors_rot, errors_trans, -fitness, inlier_rmse, inlier_rmse-fitness.
scale_objective = True  # Scales the minimization objective by the inverse of the size of the correspondence set (not used with 'errors' objective).
optimizer = gp  # Options: random (rnd), gaussian_process (gp), random_forest (rf), gradient_boosted_regression_tree (gbrt).
n_calls = 100  # Total number of times to run the optimization algorithm.
n_jobs = -1  # Options: -1 (use all cores) or integer.
acq_func = gp_hedge  # Acquisition function. Options: gp_hedge (default for gp), EI (default), PI, LCB, EIps, PIps.

# Optimizer specific options
n_initial_points = 10  # Number (>1) of (random) initial calls from 'n_calls' before BO starts. Not used with 'rnd'.
init_from_file_or_list = None  # Load initial points from file or list instead of random sampling. Options: None, list or /path/to/file.pkl.
base_estimator = ET  # Options: ET (extra trees, default), RF (random forest). Used only with 'rf' optimizer.
acq_optimizer = auto  # Options: auto, sampling, lbfgs. Used only with 'gp' optimizer.
n_restarts_optimizer = 5  # Used only with 'gp' optimizer and 'lbfgs' 'acq_optimizer'.
noise = gaussian  # Observation noise. Options: gaussian or float. Used only with 'gp' optimizer.

# Advanced options (only change if you understand their effect)
initial_point_generator = lhs  # Options: random, sobol, halton, hammersly, lhs, grid.
random_state = None  # Anything that can be evaluated with 'eval(random_state)'.
n_points = 10000
xi = 0.01  # Used with P/EI(ps) 'acq_func'.
kappa = 1.96  # Used with LCB 'acq_func'.

[options]
draw = False  # Visualize optimization results.
plot_dims = None # Number of search dimensions (config options) to draw. Options: None (all), int.
verbose = False
progress = True  # Print progress bar.
save = True  # Save optimization results.
filename = None  # Result filename. Options: None (using config md5 hash), string.
overwrite = False  # Re-running optimization with new parameters will overwrite old results for the same data.

[data]
source_files = tests/test_data/suzanne.ply
target_files = tests/test_data/bop_data/obj_of_interest/train_pbr/000000/depth/*.png
init_poses = None
ground_truth = tests/test_data/ground_truth_pose.json
one_vs_one = False

########################################################################################################################
############################## PARAMETERS BELOW THIS LINE CAN BE SUBJECT TO OPTIMIZATION ###############################
########################################################################################################################

[source_params]
sample_type = [None, "uniformly"]
number_of_points = (1000, 10000)
camera_intrinsic = None
camera_extrinsic = None
depth_scale = 1000.0
depth_trunc = 1000.0

[target_params]
sample_type = None
number_of_points = None
camera_intrinsic = tests/test_data/bop_data/obj_of_interest/camera.json
camera_extrinsic = tests/test_data/bop_data/obj_of_interest/train_pbr/000000/scene_camera.json
depth_scale = 1000.0
depth_trunc = 3.0

[feature_processing]
search_param = ["radius", "knn", "hybrid"]
search_param_knn = (10, 100)
search_param_radius = (0.01, 0.1)

[source_processing]
downsample = [None, "voxel"]
downsample_factor = (0.001, 0.01)
remove_outlier = [None, "statistical"]
outlier_std_ratio = [1e-30, 0.1, 1.0, 2.0, 3.0, 4.0, 5.0, 10.0]
scale = 1.0
estimate_normals = True
recalculate_normals = [True, False]
normalize_normals = [True, False]
orient_normals = None
search_param = ["radius", "knn", "hybrid"]
search_param_knn = (5, 50)
search_param_radius = (0.01, 0.1)

[target_processing]
downsample = [None, "voxel"]
downsample_factor = (0.001, 0.01)
remove_outlier = [None, "statistical"]
outlier_std_ratio = [1e-30, 0.1, 1.0, 2.0, 3.0, 4.0, 5.0, 10.0]
scale = 1.0
estimate_normals = True
recalculate_normals = [True, False]
normalize_normals = [True, False]
orient_normals = None
search_param = ["radius", "knn", "hybrid"]
search_param_knn = (5, 50)
search_param_radius = (0.01, 0.1)

[algorithms]
initializer = ransac
refiner = icp

[initializer_params]
max_iteration = (10000, 100000)
confidence = [0.9, 0.99, 0.999]
max_correspondence_distance = (0.01, 0.5)
with_scaling = False
ransac_n = 3
similarity_threshold = [0.7, 0.8, 0.9, 0.99]
normal_angle_threshold = 0.52
n_times = [1, 3]
multi_scale = False
# Values below can only be optimized with 'random' optimizer
checkers = ["distance", "edge"]
scales = [0.04, 0.02, 0.01]
iterations = [100000, 50000, 10000]
radius_multiplier = [2, 5]

[refiner_params]
relative_fitness = (1e-10, 1e-3)
relative_rmse = (1e-10, 1e-3)
max_iteration = (10, 100)
max_correspondence_distance = (0.001, 0.01)
estimation_method = ["point", "plane"]
with_scaling = [True, False]
kernel = [None, "tukey", "cauchy", "l1", "l2", "gm"]
kernel_noise_std = (0.01, 1.0)
crop_target_around_source = [True, False]
crop_scale = (1.0, 2.0)
n_times = 1
multi_scale = [True, False]
# Values below can only be optimized with 'random' optimizer
scales = [0.02, 0.01, 0.005]
iterations = [50, 30, 20]
radius_multiplier = [2, 5]
