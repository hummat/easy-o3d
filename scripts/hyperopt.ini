# Initialization file for `hyperopt.py`.
# Documentation of possible parameter values and their meaning can be found in 'registration.ini' and code docstrings.

# During optimization, values in lists are treated as discrete choices while values in tuples (parentheses) are treated
# as intervals. Single values are fixed. Values that are already lists, e.g. 'number_of_points', need to be wrapped in
# an additional list (no interval possible in this case). See examples below.

# Examples:
# 1. Optimize for 'sample_type' (choice): sample_type = ["uniformly", "poisson_disk"]
# 2. Optimize for 'number_of_points' (choice): number_of_points = [1000, 2000]
# 3. Optimize for 'number_of_points' (interval): number_of_points = (1000, 2000)
# 4. Optimize for 'number_of_points' using different values for two inputs: number_of_points = [[1000, 2000], (1500, 3000)]

########################################################################################################################
################################# PARAMETERS BELOW THIS LINE MUST BE SPECIFIED #########################################
########################################################################################################################

[optimization]
iterations = 100
optimizer = gaussian_process  # Options: 'random' ('rnd'), 'gaussian_process' ('gp'), 'random_forest' ('rf'), 'gradient_boosted_regression_tree' ('gbrt')

[options]
verbose = False

[data]
source_files = ../tests/test_data/suzanne.ply
target_files = ../tests/test_data/bop_data/obj_of_interest/train_pbr/000000/depth/*.png
init_poses = ../tests/test_data/ground_truth_pose.json
ground_truth = ../tests/test_data/ground_truth_pose.json
one_vs_one = False

########################################################################################################################
############################## PARAMETERS BELOW THIS LINE CAN BE SUBJECT TO OPTIMIZATION ###############################
########################################################################################################################

[source_params]
sample_type = ["uniformly", "poisson_disk"]
number_of_points = (5000, 20000)
camera_intrinsic = none
camera_extrinsic = none
depth_scale = 1000.0
depth_trunc = 1000.0

[target_params]
sample_type = uniformly
number_of_points = none
camera_intrinsic = ../tests/test_data/bop_data/obj_of_interest/camera.json
camera_extrinsic = ../tests/test_data/bop_data/obj_of_interest/train_pbr/000000/scene_camera.json
depth_scale = 1000.0
depth_trunc = 1000.0

[feature_processing]
compute_feature = True
search_param = hybrid
search_param_knn = 100
search_param_radius = 0.05

[source_processing]
downsample = voxel
downsample_factor = 0.001
remove_outlier = none
outlier_std_ratio = 1.0
scale = 1.0
estimate_normals = False
recalculate_normals = False
normalize_normals = False
orient_normals = none
search_param = hybrid
search_param_knn = 30
search_param_radius = 0.02

[target_processing]
downsample = voxel
downsample_factor = 0.001
remove_outlier = none
outlier_std_ratio = 1.0
scale = 1.0
estimate_normals = False
recalculate_normals = False
normalize_normals = False
orient_normals = none
search_param = hybrid
search_param_knn = 30
search_param_radius = 0.02

[algorithms]
initializer = ransac
refiner = icp

[initializer_params]
max_iteration = 100000
confidence = 0.999
max_correspondence_distance = 0.015
with_scaling = False
ransac_n = 3
checkers = ["distance", "edge"]
similarity_threshold = 0.9
normal_angle_threshold = 30
n_times = 1

[refiner_params]
relative_fitness = 1e-6
relative_rmse = 1e-6
max_iteration = 30
max_correspondence_distance = 0.004
estimation_method = point_to_point
with_scaling = False
kernel = none
kernel_noise_std = 0.1
crop_target_around_source = False
crop_scale = 1.0
n_times = 1
multi_scale = False
scales = [[0.02, 0.01, 0.005], [0.02, 0.01, 0.005]]
iterations = [50, 20, 10]
radius_multiplier = [2, 5]
